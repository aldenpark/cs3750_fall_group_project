@page
@model Group_Project.Pages.Assignments.AssignmentHomeModel

@{ ViewData["Title"] = "Assignment Home";
    Layout = "~/Pages/Shared/_Layout.cshtml";

    // https://localhost:44329/Assignments/AssignmentHome?id=1 }


<h1>@Model.Assignment.Title</h1>

<input type="hidden" asp-for="Assignment.SubmissionId" />
<div>
    <h4>Submissions</h4>
    <hr />
    <div class="float-sm-right">
    @if (Model.Assignment.SubmissionType != "Text Entry" && Model.SubmissionObj.Count > 0)
    {
        <a href="@Model.SubmissionObj.LastOrDefault().fileSubmit" target="_blank">@Model.SubmissionObj.LastOrDefault().fileSubmitDisplay</a>
    }
    @if (Model.Assignment.Grade > 0)
    {
        <div id="chartContainer" class="mt-3" style="height: 120px; width: 150px;"></div>
    }
    </div>
    <dl class="row">
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Assignment.Title)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Assignment.Title)
    </dd>
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Assignment.Description)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Assignment.Description)
    </dd>
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Assignment.DueDate)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Assignment.DueDate)
    </dd>
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Assignment.PointsPossible)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Assignment.PointsPossible)
    </dd>
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => Model.Assignment.Grade)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Assignment.Grade)
    </dd>
</dl>
</div>

    @if (Model.Assignment.SubmissionType == "Text Entry" && Model.SubmissionObj.Count > 0)
    {
        @Html.Raw(Model.SubmissionObj.LastOrDefault().fileSubmitDisplay)
    }


    <nav>
        <ul class="nav nav-tabs" id="myTab" role="tablist">
            @if (Model.Assignment.SubmissionType != "Text Entry")
            {
<li class="nav-item">
    <a class="nav-link active" id="file-tab" data-toggle="tab" href="#file" role="tab" aria-controls="home"
       aria-selected="true">File Submission</a>
</li> 
            }
            else if (Model.Assignment.SubmissionType == "Text Entry")
            {
<li class="nav-item">
    <a class="nav-link" id="text-tab" data-toggle="tab" href="#text" role="tab" aria-controls="text"
       aria-selected="false">Text Submission</a>
</li>
            }
        </ul>
        <div class="tab-content m-4" id="myTabContent">
            <form method="post" enctype="multipart/form-data">
                <input type="hidden" asp-for="Assignment.ID" />
                <input type="hidden" id="SubmissionType" name="SubmissionType" value="@Model.Assignment.SubmissionType" />
                        <div class="tab-pane fade @(Model.Assignment.SubmissionType != "Text Entry" ? "show active" : "")" id="file" role="tabpanel" aria-labelledby="file-tab">
                            <input type="file" class="form-control" id="uploadBox" name="files" />
                        </div>
                        <div class="tab-pane fade @(Model.Assignment.SubmissionType == "Text Entry" ? "show active" : "")" id="text" role="tabpanel" aria-labelledby="text-tab">
                            <textarea class="form-control" asp-for="Assignment.TextSubmission" style="height:200px;"></textarea>
                        </div>

                <div class="form-group mt-4">
                    <input type="submit" value="@((Model.SubmissionObj.Count > 0 && Model.SubmissionObj[0].ID > 0) ? "Resubmit" : "Submit")" class="btn btn-primary" onclick="return ValidateInput()" />
                </div>

            </form>
        </div>
    </nav>


    <div>
        <a asp-page="/Assignments/AssignmentUpdate?id=@Html.DisplayFor(model => model.Assignment.ID)">Update an assignment</a>
    </div>
}
@section Scripts{
<script src="https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js"></script>
<script src="~/lib/canvasjs.min.js"></script>
        <script>
            function ValidateInput() {
                if (document.getElementById("SubmissionType").includes("Text Entry")) {
                    return true;
                }
                else {
                    if (document.getElementById("uploadBox").value == "") {
                        swal('Error', 'No Assignment has been selected for submission', 'error')
                        return false;
                    }

                    var fileInput = document.getElementById('uploadBox');
                    var filePath = fileInput.value;

                    // Allowing file type
                    var allowedExtensions = /(\.pdf|\.docx|\.txt)$/i;

                    if (!allowedExtensions.exec(filePath)) {
                        swal('Error', 'Invalid file type selected for upload.  Only files of type pdf, docx, and txt are allowed!', 'error')
                        fileInput.value = '';
                        return false;
                    }

                    return true;
                }
            }

            var average = @Model.Assignment.Avg;
            var grade = @Model.Assignment.Grade;
            var maxpoints = @Model.Assignment.PointsPossible;
            var chart = new CanvasJS.Chart("chartContainer", {
                animationEnabled: true,
                theme: "light2",
                axisY: {
                    stripLines: [
                        {
                            value: null,
                            label: "Average: ",
                            showOnTop: true
                        }
                    ],
                    gridThickness: 0,
                    minimum: 0,
                    maximum: maxpoints
                },
                data: [{
                    type: "column",
                    dataPoints: [
                        { y: grade, label: " " },
                    ]
                }]
            });
            chart.options.axisY.stripLines[0].value = average;
            chart.options.axisY.stripLines[0].label += average.toPrecision(3);
            chart.render();
        </script>
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
